{
	"info": {
		"_postman_id": "868fd557-0e7c-4f6c-b059-8e3a01c7e6f4",
		"name": "post_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23481714"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Body responce is string\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.вывести статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. спарсить response body в json",
							"var jsonData = pm.response.json();",
							"",
							"//4.Проверить,что name в ответе равно name s request (name вбить руками.)",
							"var resp_name = jsonData.name",
							"console.log(\"resp_name = \", resp_name)",
							"",
							"pm.test(\"resp_name_check\", function () {",
							"    pm.expect(resp_name).to.eql('vlad');",
							"}); ",
							"",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"var resp_age = jsonData.age",
							"console.log(\"resp_age = \", resp_age)",
							"",
							"pm.test(\"resp_age_check\", function () {",
							"    pm.expect(resp_age).to.eql('25');",
							"});",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"var resp_salary = jsonData.salary",
							"console.log(\"resp_salary_check =\", resp_salary)",
							"",
							"pm.test(\"resp_salary_check\", function () {",
							"    pm.expect(resp_salary).to.eql(3000);",
							"});",
							"",
							"//7. Спарсить request.",
							"var reqData = pm.request.url.query.toObject();",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"var jsonData = pm.response.json();",
							"var resp_name = jsonData.name",
							"",
							"var req = request.data;",
							"var req_name = req.name;",
							"console.log('Resp_name = ', resp_name)",
							"console.log('Req_name = ', req_name)",
							"",
							"pm.test(\"Req_resp_name_check\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(req_name);",
							"});",
							" ",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"var jsonData = pm.response.json();",
							"var resp_age = jsonData.age",
							"",
							"var req = request.data;",
							"var req_age = req.age;",
							"console.log('Resp_age = ', resp_age)",
							"console.log('Req_age = ', req_age)",
							"",
							"pm.test(\"Req_resp_age_check\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.age).to.eql(req_age);",
							"});",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"var jsonData = pm.response.json();",
							"var resp_salary = jsonData.salary;",
							"",
							"var req = request.data;",
							"var req_salary = + req.salary;",
							"console.log('Resp_salary = ',  resp_salary)",
							"console.log('Req_salary = ', req_salary)",
							"",
							"pm.test(\"req_resp_salary_check\", function () {",
							"    pm.expect(jsonData.salary).to.eql(req_salary);",
							"});",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"var resp_famaly = jsonData.famaly",
							"console.log('Resp_famaly = ', resp_famaly);",
							"",
							"// //12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							" var jsonData = pm.response.json();",
							" var req_u_salary_1_6_years = jsonData.salary*4;",
							"",
							" var req = request.data;",
							" var req_u_salary_1_6_years = + req.salary*4;",
							"",
							" console.log('req_u_salary_1_6_years = ',  resp_salary*4)",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "vlad",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"//4.Спарсить request.",
							"var reqData = pm.request.url.query.toObject();",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"var resp_name = jsonData.name",
							"var req_name = reqData.name",
							"",
							"console.log('resp = ', resp_name)",
							"console.log('req = ', req_name)",
							"",
							"pm.test(\"resp_name_check\", function () {    ",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"",
							"//6.Проверить, что age в ответе равно age s request (age забрать из request.)",
							"var resp_age = jsonData.age",
							"var req_age = reqData.age",
							"",
							"console.log('resp = ', resp_age)",
							"console.log('req = ', req_age)",
							"",
							"pm.test(\"resp_age_check\", function () {    ",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"",
							"//7.Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"var resp_salary = jsonData.age",
							"var req_salary = reqData.age",
							"",
							"console.log('resp = ', resp_salary)",
							"console.log('req = ', req_salary)",
							"",
							"pm.test(\"resp_salary_check\", function () {    ",
							"    pm.expect(resp_salary).to.eql(req_salary);",
							"});",
							"",
							"//8.Вывести в консоль параметр family из response.",
							"var resp_family = jsonData.family",
							"console.log('Resp_family = ', resp_family);",
							"",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog_name\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog_age\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"name_check\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');",
							"});",
							"",
							"//12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"name_check\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?age=25&name=vlad&salary=3000&",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "name",
							"value": "vlad"
						},
						{
							"key": "salary",
							"value": "3000"
						},
						{
							"key": "",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"var reqData = pm.request.url.query.toObject();",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"var resp_name = jsonData.name",
							"var req_name = reqData.name",
							"",
							"console.log('resp = ', resp_name)",
							"console.log('req = ', req_name)",
							"",
							"pm.test(\"resp_name_check\", function () {    ",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"var resp_age = jsonData.age",
							"var req_age = reqData.age",
							"",
							"console.log('resp = ',  resp_age)",
							"console.log('req = ', req_age)",
							"",
							"pm.test(\"resp_age_check\", function () {    ",
							"    pm.expect(resp_age).to.eql(+req_age);",
							"});",
							"",
							"//7. Вывести в консоль параметр salary из request.",
							"var req_salary = jsonData.salary",
							"console.log('Req = ', req_salary)",
							"",
							"//8. Вывести в консоль параметр salary из response.",
							"var resp_salary = jsonData.salary",
							"console.log('Req = ', resp_salary)",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"var resp_salary_0 = jsonData.salary[0]",
							"console.log('Req = ', resp_salary_0)",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"var resp_salary_1 = jsonData.salary[1]",
							"console.log('Req = ', resp_salary_1)",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"var resp_salary_2 = jsonData.salary[2]",
							"console.log('Req = ', resp_salary_2)",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"check_0\", function () {    ",
							"     pm.expect(+resp_salary_0 ).to.eql(req_salary[0]);",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"check_1\", function () {    ",
							"     pm.expect(+resp_salary_1 ).to.eql(req_salary[0]*2);",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"check_2\", function () {    ",
							"     pm.expect(+resp_salary_2 ).to.eql(req_salary[0]*3);",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"pm.environment.get(\"name\", \"url_name_info_4\");",
							"",
							"// 16. Создать в окружении переменную age",
							"pm.environment.get(\"age\", \"url_age_info_4\");",
							"",
							"// 17. Создать в окружении переменную salary",
							"pm.environment.get(\"salary\", \"url_salary_info_4\");",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", \"url_name_info_4\");",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?age=25&name=vlad&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "name",
							"value": "vlad"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "vlad",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}